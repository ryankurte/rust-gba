//! GBA ROM header object

/// ROM header
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct Header {
    /// Trampoline 1, b 80000c0, jumps to end of header
    pub start_code: u32,

    /// Nintendo logo, must match for boot to succeed (see [`LOGO`])
    pub logo: [u8; 0x9C],

    /// Game title (zero padded)
    pub title: [u8; 12],

    /// Game code
    pub game_code: u32,

    /// Maker code
    pub maker_code: u16,

    /// Fixed - should always be `0x96`
    pub fixed: u8,

    /// Unit code
    pub unit_code: u8,

    /// Device type - should always be `0x80`
    pub device_type: u8,

    /// Unused
    pub unused: [u8; 7],

    /// Game version number
    pub game_version: u8,

    /// Header complement
    pub complement: u8,

    /// Whole cart checksum (unused?)
    pub checksum: u16,

    /// Trampoline 2, b 80000e0, jumps to RESET_VECTOR
    pub start_code2: u32,

    /// Boot method - 0 for ROM boot, 3 for multiplay
    pub boot_method: u8,

    /// Slave ID for multiplay boot
    pub slave_number: u8,

    /// Reserved data area
    pub reserved: [u8; 26],
}

impl Header {
    pub const fn default() -> Self {
        Self {
            start_code: 0xEA00002E,
            logo: LOGO,
            title: [0u8; 12],
            game_code: 0,
            maker_code: 0,
            fixed: 0x96,
            unit_code: 0,
            device_type: 0x80,
            unused: [0u8; 7],
            game_version: 0,
            complement: 0,
            checksum: 0,
            start_code2: 0xEA000008,
            boot_method: 0,
            slave_number: 0,
            reserved: [0u8; 26],
        }
    }
}

/// Nintendo logo (must be included in the header)
pub const LOGO: [u8; 0x9C] = [
    0x24, 0xFF, 0xAE, 0x51, 0x69, 0x9A, 0xA2, 0x21, 0x3D, 0x84, 0x82, 0x0A, 0x84, 0xE4, 0x09, 0xAD,
    0x11, 0x24, 0x8B, 0x98, 0xC0, 0x81, 0x7F, 0x21, 0xA3, 0x52, 0xBE, 0x19, 0x93, 0x09, 0xCE, 0x20,
    0x10, 0x46, 0x4A, 0x4A, 0xF8, 0x27, 0x31, 0xEC, 0x58, 0xC7, 0xE8, 0x33, 0x82, 0xE3, 0xCE, 0xBF,
    0x85, 0xF4, 0xDF, 0x94, 0xCE, 0x4B, 0x09, 0xC1, 0x94, 0x56, 0x8A, 0xC0, 0x13, 0x72, 0xA7, 0xFC,
    0x9F, 0x84, 0x4D, 0x73, 0xA3, 0xCA, 0x9A, 0x61, 0x58, 0x97, 0xA3, 0x27, 0xFC, 0x03, 0x98, 0x76,
    0x23, 0x1D, 0xC7, 0x61, 0x03, 0x04, 0xAE, 0x56, 0xBF, 0x38, 0x84, 0x00, 0x40, 0xA7, 0x0E, 0xFD,
    0xFF, 0x52, 0xFE, 0x03, 0x6F, 0x95, 0x30, 0xF1, 0x97, 0xFB, 0xC0, 0x85, 0x60, 0xD6, 0x80, 0x25,
    0xA9, 0x63, 0xBE, 0x03, 0x01, 0x4E, 0x38, 0xE2, 0xF9, 0xA2, 0x34, 0xFF, 0xBB, 0x3E, 0x03, 0x44,
    0x78, 0x00, 0x90, 0xCB, 0x88, 0x11, 0x3A, 0x94, 0x65, 0xC0, 0x7C, 0x63, 0x87, 0xF0, 0x3C, 0xAF,
    0xD6, 0x25, 0xE4, 0x8B, 0x38, 0x0A, 0xAC, 0x72, 0x21, 0xD4, 0xF8, 0x07,
];
